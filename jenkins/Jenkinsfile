pipeline {
    agent {
        label 'default'
    }
    
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
        DOCKER_IMAGE=credentials('dockerimage')
        USER_CREDENTIALS=credentials('user')
        DOCKER_CREDENTIALS=credentials('dockerhub')
    }

    stages {
        stage('GIT Checkout') {
            steps {
                git changelog: false, poll: false, url: 'https://github.com/mihirsha/rental_system.git'
            }
        }
        
        stage('OWASP Scan') {
            steps {
                dependencyCheck additionalArguments: '--format HTML', odcInstallation: 'DP-Check'
            }
        }
        
        stage('Sonar Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=rental_system -Dsonar.projectKey=rental_system
                    '''
                }  
            }
        }
        

        stage('Build') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'dockerhub') {
                        sh """
                        
                            docker build --no-cache -t $DOCKER_IMAGE .
                            
                            
                        """
                    }
                }
            }
        }

        stage('Trivy Scan & Push') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'dockerhub') {
                        sh """
                            trivy image $DOCKER_IMAGE > trivyReport.txt
                            docker push $DOCKER_IMAGE
                        """
                    }
                }
            }
        }
        
        stage('Testing') {
            steps {
                dir('.'){
                    // echo $USER_CREDENTIALS_PSW | sudo -E -S apt install python3

                        // virtualenv venv
                        // . venv/bin/activate
                        // pip install --no-cache-dir -r requirements.txt --timeout=100
                        // echo $USER_CREDENTIALS_PSW | sudo -E -S service postgresql stop
                    sh """
                        docker-compose up -d
                        pytest --html=report.html .                     
                        docker-compose down
                    """
                }
            }
        }

        stage('Deploy') {
            agent {
                label 'agentAWS'
            }
            
            steps {
                sh '''
                    echo $DOCKER_CREDENTIALS_PSW | sudo -E -S docker login --username $DOCKER_CREDENTIALS_USR --password-stdin
                    sudo docker pull $DOCKER_IMAGE 
                    sudo docker-compose up -d
                '''
            }
        }

        
    }
    post {
        always{
            archiveArtifacts artifacts: '*.html', onlyIfSuccessful: true
            emailext to: "mihir.shah@sleevesup.com.au",
            subject: "testing pipeline",
            body: "rental pipeline",
            attachmentsPattern: '*.html'
            
        cleanWs()
        }
    }
}
// "jenkins build:${currentBuild.currentResult}: ${env.JOB_NAME}",
// "${currentBuild.currentResult}: Job ${env.JOB_NAME}\nMore Info can be found here: ${env.BUILD_URL}",

