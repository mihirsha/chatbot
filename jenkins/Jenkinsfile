pipeline {
    agent {
        label 'default'
    }
    
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
        DOCKER_IMAGE=credentials('dockerimage')
        USER_CREDENTIALS=credentials('user')
        DOCKER_CREDENTIALS=credentials('dockerhub')
    }


    stages {
        stage('GIT Checkout') {
            steps {
                git changelog: false, poll: false, url: 'https://github.com/mihirsha/rental_system.git'
            }
        }
        
        stage('OWASP Scan') {
            steps {
                dependencyCheck additionalArguments: '--format HTML', odcInstallation: 'DP-Check'
            }
        }
        
        stage('Sonar Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=rental_system -Dsonar.projectKey=rental_system
                    '''
                }
                
            }
        }
        
        stage('Build') {
            steps {
                script{
                    withDockerRegistry(credentialsId: 'dockerhub') {
                        sh '''
                        
                            docker build -t $DOCKER_IMAGE .
                            docker push $DOCKER_IMAGE 
                            
                        '''
                    }
                }
                
            }
        }
        
        // stage('Testing') {
        //     steps {
        //         dir('.'){
                    
        //             sh '''
        //                 echo $USER_CREDENTIALS_PSW | sudo -E -S apt install python3
        //                 virtualenv venv
        //                 . venv/bin/activate
        //                 pip install --no-cache-dir -r requirements.txt 
        //                 docker-compose down
        //                 echo $USER_CREDENTIALS_PSW | sudo -E -S service postgresql stop
        //                 docker-compose up -d
        //                 pytest
                        
        //             '''
                    
        //         }
                
        //     }
        // }

                
        stage('Deploy') {
            agent {
                label 'agentAWS'
            }
            
            steps {
                sh """
                    ls
                """
                script{
                    withDockerRegistry(credentialsId: 'dockerhub') {
                        sh '''
                            docker ps
                        
                        '''
                    }
                    
                }
                sh '''
                    echo $DOCKER_CREDENTIALS_PSW | sudo -E -S docker login --username $DOCKER_CREDENTIALS_USR --password-stdin
                    sudo docker pull $DOCKER_IMAGE 
                    sudo docker-compose up -d
                '''
                
            }
        }
    }
}
